import time

#CLASES
#ESTA CLASE ES PARA MANTENIMIENTO DE UN CLIENTE
class Cliente(object):
    def __init__(self, cedula, nombre, telefono, correo, sexo,deuda,mascota):
        """

        :param cedula: Identificador de la persona
        :param nombre: Nombre de la persona
        :param teléfono: Nùmero de celular
        :param correo: Correo electrónico
        :param sexo: Sexo de la persona (Femenino o Masculino)
        :param deuda: Monto adeudado
        :param mascota: Mascota del cliente

        """
        self.cedula = cedula
        self.nombre = nombre
        self.telefono = telefono
        self.correo = correo
        self.sexo = sexo
        self.deuda = deuda
        self.mascota = mascota

    def __str__(self):
        return ("Cédula: {0}, Nombre: {1},\n"
                "Teléfono: {2}, Email: {3},\n"
                "Género: {4}, Deuda: {5},\n"
                "Mascota: {6}\n").format(self.cedula,
                                                   self.nombre,
                                                   self.telefono,
                                                   self.correo,
                                                   self.sexo,
                                                self.deuda,
                                     self.mascota)


#ESTA CLASE ES PARA LAS MASCOTAS

class Mascota(object):
    def __init__(self, codigo, dueno, nombre ,fingreso ,fnacimiento ,sexo ,tipo ,raza ,color ,peso , direccion, telefono, email ,observaciones):
        """

        :param codigo: Identificador el codigo de la mascota
        :param dueño: Dueño de la mascota
        :param nombre: Nombre de la mascota
        :param fingreso: Indica fecha de ingreso de la mascota
        :param fnacimiento: Indica la fecha de nacimiento de la mascota
        :param sexo: Indica sexo de la mascota(hembra o macho)
        :param tipo: Indica el tipo de animail que es(gato,perro,perico)
        :param raza: Raza de la mascota
        :param color: Color de la mascota
        :param peso: Peso en kilogramos de la mascota
        :param direccion: Dirección de residencia de la mascota
        :param teléfono: Nùmero de celular
        :param email: Correo electrónico
        :param observaciones: observaciones que cada mascota

        """
        self.codigo = codigo
        self.dueno = dueno
        self.nombre = nombre
        self.fingreso = fingreso
        self.fnacimiento = fnacimiento
        self.sexo = sexo
        self.tipo = tipo
        self.raza = raza
        self.color = color
        self.peso = peso
        self.direccion = direccion
        self.telefono = telefono
        self.email = email
        self.observaciones = observaciones

    def __str__(self):
        return ("Código: {0}, Dueño: {1}, Nombre: {2},\n"
                "Fecha de ingreso: {3}, Fecha de nacimiento: {4},\n"
                "Sexo: {5}, Tipo: {6},\n"
                "Raza: {7}, Color: {8}, Peso: {9},\n"
                "Dirección: {10}, Telfono: {11},\n"
                "Email: {12}, Observaciones: {13},\n").format(self.codigo,
                                                          self.dueno,
                                                          self.nombre,
                                                          self.fingreso,
                                                          self.fnacimiento,
                                                          self.sexo,
                                                          self.tipo,
                                                          self.raza,
                                                          self.color,
                                                          self.peso,
                                                          self.direccion,
                                                          self.telefono,
                                                          self.email,
                                                          self.observaciones)




#ESTA CLASE ES PARA MANTENIMIENTO DE VACUNAS

class Vacuna(object):
    def __init__(self, codigo, descripcion, precio):
        """

        :param codigo: Identificador de vacuna
        :param descripcion: Descripcion de la vacuna
        :param precio: Costo de la vacuna


        """
        self.codigo = codigo
        self.descripcion = descripcion
        self.precio = precio


    def __str__(self):
        return ("Código: {0}, Descripcion: {1},"
                "Precio: {2}").format(self.codigo,
                                        self.descripcion,
                                        self.precio)




# ESTA CLASE ES PARA MANTENIMIENTO DE TRATAMIENTOS
class Tratamiento(object):
    def __init__(self, codigo, descripcion, precio):
        """

        :param codigo: Identificador de tratamiento
        :param descripcion: Descripcion del tratamiento
        :param precio: Costo del tratamiento


        """
        self.codigo = codigo
        self.descripcion = descripcion
        self.precio = precio

    def __str__(self):
        return ("Código: {0}, Descripción: {1},"
                "Precio: {2}").format(self.codigo,
                                      self.descripcion,
                                      self.precio)



# ESTA CLASE ES PARA MANTENIMIENTO DE TRATAMIENTOS
class Servicio(object):
    def __init__(self, codigo, descripcion, precio):
        """

        :param codigo: Identificador de servicio
        :param descripcion: Descripcion del Sevicio
        :param precio: Costo del Servicio


        """
        self.codigo = codigo
        self.descripcion = descripcion
        self.precio = precio

    def __str__(self):
        return ("Código: {0}, Descripción: {1},"
                "Precio: {2}").format(self.codigo,
                                      self.descripcion,
                                      self.precio)


#OBJETOS DE CLIENTES
cliente1 = Cliente("207830110", " María Fernanda Arce Castro","63317476",
                   "mariafarce23@gmail.com","Femenino",0," Molly")

cliente2 = Cliente("207700341", "Wendy Zepeda Zeledón","70639974",
                   "wenzepeda97@gmail.com","Femenino",30000,"Lazy")


#OBJETOS DE MASCOTAS
mascota1 = Mascota("001"," Wendy Zepeda Zeledón", "lazy",
                   " 04-08-2018", " 10-01-2017", "Hembra",
                   " Perro", "labrador", "Blanco con Cafè", "18.6 kg",
                   "Venecia", " 70639974", "wenzepeda97@gmail.com",
                   "desparacitaciòn y vacunas")

mascota2 = Mascota("002", "Maria Fernanda Arce Castro", "Molly",
                   "05-08-2018", "12-12-2015", "Hembra",
                   "Perro", "Sharpei", "Cafè y negro", "15 kg",
                   "La Vega", "63317476", "mariafarce23@gmail.com",
                   "Castraciòn y vacunas")

#OBJETOS DE VACUNAS
vac1 = Vacuna("001", "Parvovirus", "8000")


#OBJETOS DE TRATAMIENTOS
trat1 = Tratamiento("001", "Antibiótico", "15000")


#OBJETOS DE SERVICIOS
serv1 = Servicio("001", "Corte de pelo", "15000")

#LISTAS DE CONTRASEÑAS Y USUARIOS
usuariosR = ["207700341"]
contrasenasR = ["Candy123"]

#LISTAS DE ANIMALES
animales = ["Perros","Gatos","Conejos","Aves","Peces","Roedores","Reptiles"]

perros = ["Beagle","Bóxer", "Bulldog","Bull Terrier",
          "Chihuahua","Chow Chow","Dálmata","Dóberman","Labrador Retriever","Pastor Alemán","Rottweiler",
          "San Bernardo"]

gatos = ["Angora", "Azul Ruso","Bengala","Burmés","Gato Persa","Gato Oriental",
         "Gato Siamés","Siberiano","Singapura"]

conejos = ["Azul de Viena","Conejo Californiano","Cabeza de León","Gigante Continental",
           "Jersey wooly","Mini Rex","Mini Lop","Silver Fox"]

aves = ["Canario","Cacatúa","Jilgueros","Loro","Perico","Codoniz","Gallina Frizzle"]

peces = ["Pez Ángel","Tetra de cabeza roja","Barbos tigres","Tetra Neón","Pez Disco"
         "Pez Hacha","Pez Betta","Pez Payaso","Pez Besador","Pez Globo"]

roedores = ["Ardilla","Cobaya","Hámster","Jerbo","Conejillo de índias","Ratón"]

reptiles = ["Iguana","Camaleón","Tortuga de agua","Serpiente"]

colores = ["Negro","Blanco","Gris","Marrón","Marrón Claro", "Marrón Oscuro","Crema"
           ,"Dorado","Rojízo","Marrón Rojizo"]

#DICCIONARIOS DE CLIENTES, MASCOTAS, VACUNAS, TRATAMIENTOS, SERVICIOS
clientes = {cliente1.cedula : cliente1, cliente2.cedula : cliente2}
mascotas = {mascota1.codigo : mascota1, mascota2.codigo : mascota2}
vacunas = {vac1.codigo : vac1}
tratamientos = {trat1.codigo: trat1}
servicios = {serv1.codigo : serv1}

#FUNCION PARA REGISTRO DE USUARIO
def registrar(ced,cont):
    if ced in usuariosR:
        print("Número de ususario existente en el sistema. Intente nuevamente\n")
    else:
        usuariosR.append(ced)
        contrasenasR.append(cont)
        print("Se ha creado un nuevo usuario en el sistema.\n")
        print(usuariosR)

#FUNCION PARA REGISTRAR CLIENTE
def registrar_cliente(cliente):
    """
    Registra un cliente
    :param cliente: cliente que se desea registrar
    :return: mensaje de éxito en caso de que se pueda registrar
    """
    val, msj = validar_cliente(cliente)
    if not val:
        return msj
    clientes[cliente.cedula] = cliente
    return cliente.nombre, "Ha sido registrado exitosamente"

def validar_cliente(cliente):
    """
    Valida que todos los datos de un cliente esten correctos
    :param cliente: cliente a validar
    :return: True si es correcto, mensj= con la información del vuelo
    """
    mensj = "\nInforme del cliente en registro\n"
    val = True

    if cliente.cedula in clientes:
        mensj += "\t- Número de cédula actualmente registrado en el sistema\n"
        val = False

    return val, mensj



#DEFINICIONES PARA ELIMINAR UN CLIENTE
def eliminar_cliente(num):
    """
    Esta función elimina un cliente en el registro
    :param num: El numero de cedula del cliente a Eliminar
    :return: confirmacion de eliminación o no
    """
    if num in clientes:
        del clientes[num]
    return "Eliminado con éxito\n"

def actualizar_dato():
    pass

#DEFINICIONES PARA MASCOTA
def registrar_mascota(mascota):
    """
    Registra una nueva mascota al sistema
    :param mascota: nueva mascota que se desea ingresar
    :return:
    """
    if mascota.cod in mascotas:
        mascotas[cod] += mascota
        return "Mascota actualmente en el sistema\n"

    if not mascota.cod in mascotas:
        pass

def ver_animales():
    """
    Muestra los animales que hay  en la veterinaria
    :return:
    """
    texto = "\n- ANIMALES\n"
    num_animal = 1
    for animal in animales:

        if len(animal) < 10:
            animal = animal + " " * (10 - len(animal))

        if num_animal % 2 == 0:
            texto += "{0}. {1}\n".format(num_animal, animal)
        else:
            texto += "{0}. {1}\t\t".format(num_animal, animal)
        num_animal += 1
    return texto

def buscar_animal(num):
    """
    Busca un animal por posición
    :param num: Número del color empezando en 1
    :return: Nombre del animal o --- si no existe
    """
    if num < len(animales) and num > 0:
        return animales[num - 1]
    return "---"

def ver_raza(num_animal):
    if num_animal == 1:
        texto = "\n- RAZAS \n"
        num = 1
        for x in perros:

            if len(perros) < 10:
                x = x + " " * (10 - len(perros))

            if x % 2 == 0:
                texto += "{0}. {1}\n".format(num, x)
            else:
                texto += "{0}. {1}\t\t".format(num, x)
            num += 1
        return texto

    elif num_animal == 2:
        print(gatos)
    elif num_animal== 3:
        print(conejos)
    elif num_animal == 4:
        print(aves)
    elif num_animal == 5:
        print(peces)
    elif num_animal == 6:
        print(roedores)
    elif num_animal == 7:
        print(reptiles)
    else:
        print("Opcion invalida, sí el animal aún no existe agreguelo a la lista.")

def ver_colores():
    """
    Muestra los colores de los animales
    :return:
    """
    texto = "\n- COLORES\n"
    num_color = 1
    for color in colores:

        if len(color) < 10:
            color = color + " " * (10 - len(color))

        if num_color % 2 == 0:
            texto += "{0}. {1}\n".format(num_color, color)
        else:
            texto += "{0}. {1}\t\t".format(num_color, color)
        num_color += 1
    return texto

def buscar_color(num):
    """
    Busca un color por posición
    :param num: Número del color empezando en 1
    :return: Nombre del color o --- si no existe
    """
    if num < len(colores) and num > 0:
        return colores[num - 1]
    return "---"

def buscar_cliente(cod):
    if not cod in mascotas:
        return "Mascota actualmente no registrada."

    if cod in mascotas:
        pass








#FUNCIONES PARA CONTROL DE VACUNAS
def control_vacunas(faplicacion, vacuna, observaciones):
    """
    :param faplicacion: Ingresa la fecha de aplicación de la vacuna
    :param vacuna: Nombre de la vacuna
    :param observaciones: Observaciones acerca de la vacuna aplicada a una la mascota
    :return:
    """
    faplicacion = time.strftime("%d/%m/%y")
    vacuna = input("-Digite la vacuna aplicada: \n")
    observaciones = input(("-Observaciones: \n"))

    print(time.strftime("%d/%m/%y"))

def registrar_vacuna(Vacuna):
    """
    Registra una vacuna
    :param vacuna: Vacuna que se desea registrar
    :return: mensaje de éxito en caso de que se pueda registrar
    """
    val, msj = validar_vacuna(Vacuna)
    if not val:
        return msj
    Vacuna[Vacuna.cod] = Vacuna
    return "\t- Vacuna registrada exitosamente\n"

def validar_vacuna(Vacuna):
    """
    Valida que todos los datos de una vacuna esten correctos
    :param vacuna: vacuna a validar
    :return: True si es correcto, msj= con la información de la vacuna
    """
    msj = "\nInforme de la vacuna\n"
    val = True

    if not type(Vacuna) == Vacuna:
        return False, "No es una vacuna"

    if Vacuna.id in Vacuna:
        msj += "\t- El codigo de la vacuna ya fue utilizada\n"
        val = False

    return val, msj

def eliminar_vacuna(Vacuna, vacuna=None):
    if not vacuna in Vacuna:
        return " "
    del vacuna[Vacuna]
    return "\t- Vacuna eliminada con éxito\n"

#DEFINICIONES PARA HISTORIAL MÉDICO
def buscar_mascota(cod):
    pass

def nuevo_historial():
    pass

#FUNCIÓN PARA PAGOS

def buscar_cliente(id):
    texto =    ("\n____________________________________\n"
                "\t\tE S T A D O  D E  C U E N T A "
                "\n_____________________________________\n"
                "Cliente: ")
    if not id in clientes:
        return "Cliente no registrado"
    cliente = clientes[id]
    texto += "{0} \nMonto adeudado: ₡{1}".format(cliente.nombre,cliente.deuda)
    return texto

def monto_pago(trat, vac, ser):
    pass


#FUNCIONES PARAR SERVICIOS
def buscar_servicio(cod):
    """
    Esta función valida los datos de un servicio
    :param cod: Identificador del servicio
    :return: True si es correcto, msj= con la información del cod
    """
    msj = "\t - INFORME DE SERVICIO\n"
    val = True
    if cod in servicios:
        msj += "\tEl codigo de este servicio ya se encuentra registrado\n"
        val = False

    return val, msj

def registrar_servicio(servicio):
    """
    Esta funcion registra un nuevo servicio
    :param servicio: servicio a registrar
    :return: Mensaje de exito o de fracaso a la hora de agregar el servicio
    """
    val,msj = buscar_servicio(cod)
    if not val:
        return msj
    servicios[servicio.codigo] = servicio
    return "\n- Servicio registrado exitosamente\n"

def eliminar_servicio(servicio):
    """
    Esta función elimina un servicio del sistema
    :param cod: El codigo del servicio a eliminar
    :return: Mensaje de exito o fracaso al eliminar un servicio
    """
    if not servicio in servicios:
        return "- Servicio aún no ha sido registrado"
    del servicios[servicio]
    return "- Servicio eliminado con éxito"


def lista_servicios():
    """
    Recorre el diccionario para crear un listado de los elementos numerados
    :return: Lista númerada de los elementos
    """
    lista = "_________________\n" \
            "S E R V I C I O S\n" \
            "_________________\n"
    num = 1
    for key in servicios:
        servicio = servicios[key]
        lista += "\t{0}. {1}\n".format(num, str(servicio)[8:])
        num += 1
    return lista

def buscar_serv(cod):
    """
    Busca un elemento por número de posición
    :param num: posición
    :return:  elemento
    """
    lista = list(servicios.keys())
    if cod > len(lista) or cod <= 0:
        return "---"
    return lista[cod - 1]

def info_servicio(servicio):
    """
    Muestra la información completa de un Servicio
    :param servicio: identificador del servicio
    :return: retorna la información del servicio completo
    """
    if not servicio in servicios:
        return "No se ha encontrado la información solicitada"
    return servicios[servicio]

#FUNCIONES PARAR TRATAMIENTOS
def buscar_tratamiento(cod):
    """
    Esta función valida los datos de un tratamiento
    :param cod: Identificador del tratamiento
    :return: True si es correcto, msj= con la información del codigo
    """
    msj = "\t - INFORME DE TRATAMIENTOS\n"
    val = True
    if cod in tratamientos:
        msj += "\tEl codigo de este tratamiento ya se encuentra registrado\n"
        val = False

    return val, msj

def registrar_tratamiento(tratamiento):
    """
    Esta funcion registra un nuevo tratamiento
    :param tratamiento: tratamiento a registrar
    :return: Mensaje de exito o de fracaso a la hora de agregar el tratamiento
    """
    val,msj = buscar_tratamiento(cod)
    if not val:
        return msj
    tratamientos[tratamiento.codigo] = tratamiento
    return "\n- Tratamiento registrado exitosamente\n"

def eliminar_tratamiento(tratamiento):
    """
    Esta función elimina un tratamiento del sistema
    :param cod: El codigo del tratamiento a eliminar
    :return: Mensaje de exito o fracaso al eliminar un tratamiento
    """
    if not tratamiento in tratamientos:
        return "- Tratamiento aún no ha sido registrado"
    del tratamientos[tratamiento]
    return "- Tratamiento eliminado con éxito"


def lista_tratamientos():
    """
    Recorre el diccionario para crear un listado de los elementos numerados
    :return: Lista númerada de los elementos
    """
    lista = "_______________________\n" \
            "T R A T A M I E N T O S\n" \
            "_______________________\n"
    num = 1
    for key in tratamientos:
        tratamiento = tratamientos[key]
        lista += "\t{0}. {1}\n".format(num, str(tratamiento)[8:])
        num += 1
    return lista

def buscar_trat(cod):
    """
    Busca un elemento por número de posición
    :param num: posición
    :return:  elemento
    """
    lista = list(tratamientos.keys())
    if cod > len(lista) or cod <= 0:
        return "---"
    return lista[cod - 1]

def info_tratamiento(tratamiento):
    """
    Muestra la información completa de un tratamiento
    :param tratamiento: identificador del tratamiento
    :return: retorna la información del tratamiento completo
    """
    if not tratamiento in tratamientos:
        return "No se ha encontrado la información solicitada"
    return tratamientos[tratamiento]

#MAIN PRINCIPAL
print(  "+++++++++++++++++++++++++++++++++++\n"
        "** V E T E R I N A R I A   W Y F **\n"
        "+++++++++++++++++++++++++++++++++++\n"
        "           INICIAR SESIÓN          ")

#MENU PRINCIPAL
menu = (("+++++++++++++++++++++++++++++++++++\n"
        "** V E T E R I N A R I A   W Y F **\n"
        "+++++++++++++++++++++++++++++++++++\n"
        "1. Registrar nuevo usuario\n"
        "2. Mantenimiento de Clientes\n"
        "3. Mantenimiento de mascotas\n"
        "4. Control de vacunas\n"
        "5. Historial Clínico\n"
        "6. Tratamientos\n"
        "7. Servicios\n"
        "8. Pago\n"
        "9. Cerrar sesión\n"
        "+++++++++++++++++++++++++++++++++++\n"
        "Seleccione una de las opciones: "))


#MENU DE OPCIONES PARA MANTENIMIENTO DE CLIENTES
opciones2 = (("+++++++++++++++++++++++++++++++++++\n"
             "** V E T E R I N A R I A   W Y F **\n"
             "+++++++++++++++++++++++++++++++++++\n"
             "\t1. Insertar nuevo cliente\n"
             "\t2. Eliminar cliente\n"
             "\t3. Actualizar datos de cliente\n"
             "\t4. Consulta dato de cliente\n"
             "\t5. Volver al Menú Principal\n"
             "++++++++++++++++++++++++++++++++++++\n"
             "Seleccione una de las opciones: "))

#MENU DE OPCIONES PARA MANTENIMIENTO DE MASCOTAS
opciones3 = (("+++++++++++++++++++++++++++++++++++\n"
              "** V E T E R I N A R I A   W Y F **\n"
              "+++++++++++++++++++++++++++++++++++\n"
              "\t1. Insertar nueva mascota\n"
              "\t2. Eliminar mascota\n"
              "\t3. Actualizar datos de mascota\n"
              "\t4. Consulta dato de mascota\n"
              "\t5. Volver al Menú Principal\n"
              "+++++++++++++++++++++++++++++++++++\n"
              "Seleccione una de las opciones: "))

#MENU DE OPCIONES PARA MANTENIMIENTO DE VACUNAS
opciones4 = (("+++++++++++++++++++++++++++++++++++\n"
             "** V E T E R I N A R I A W Y F **\n"
             "+++++++++++++++++++++++++++++++++++\n"
             "\t1. Control de vacunas\n"
             "\t2. Insertar vacuna\n"
             "\t3. Eliminar vacuna\n"
             "\t4. Volver al Menú Principal\n"
             "+++++++++++++++++++++++++++++++++++\n"
             "Selecione una de las opciones: "))


opciones5 = (("+++++++++++++++++++++++++++++++++++\n"
              "** V E T E R I N A R I A   W Y F **\n"
              "+++++++++++++++++++++++++++++++++++\n"
              "\t1. Insertar nuevo historial de mascota\n"
              "\t2. Consultar historial de mascota\n"
              "\t3. Eliminar historial de mascota\n"
              "\t4. Volver al Menú principal\n"
              "+++++++++++++++++++++++++++++++++++\n"
              "Selecione una de las opciones: \n"))


opciones6 = (("+++++++++++++++++++++++++++++++++++\n"
              "** V E T E R I N A R I A   W Y F **\n"
              "+++++++++++++++++++++++++++++++++++\n"
              "\t1. Insertar tratamiento\n"
              "\t2. Eliminar tratamiento\n"
              "\t3. Volver al Menú principal\n"
              "+++++++++++++++++++++++++++++++++++\n"
              "Selecione una de las opciones: \n"))
opciones7 = (("+++++++++++++++++++++++++++++++++++\n"
              "** V E T E R I N A R I A   W Y F **\n"
              "+++++++++++++++++++++++++++++++++++\n"
              "\t1. Aplicar nuevo servicio a mascota\n"
              "\t2. Agregar nuevo servicio\n"
              "\t3. Eliminar servcio\n"
              "\t4. Volver al Menú principal\n"
              "+++++++++++++++++++++++++++++++++++\n"
              "Selecione una de las opciones: \n"))


opciones8 = (("+++++++++++++++++++++++++++++++++++\n"
              "** V E T E R I N A R I A   W Y F **\n"
              "+++++++++++++++++++++++++++++++++++\n"
              "\t1. Estado de cuenta\n"
              "\t2. Efectuar pago\n"
              "\t3. Volver al Menú principal\n"
              "+++++++++++++++++++++++++++++++++++\n"
              "Selecione una de las opciones: \n"))





#MAIN PRINCIPAL

while 1:
    usuario = input('User: ')
    if usuario in usuariosR:
        passw = input('Password: ')
        if passw in contrasenasR:
            print("Ingreso de datos correcto.")
        else:
            print("Contraseña incorrecta. Por favor intente nuevamente")
    else:
        print("Nombre usuario inválido por favor intente nuevamente.\n"
              "Sí aún no esta registrado, contacte a su administrador.")
        break
    while 1:
        op = int(input(menu))
        if op == 1:
            ced = input("Número de cédula: ")
            cont = input("Ingrese una contraseña de al menos 8 caracteres: ")
            registrar(ced,cont)

        elif op == 2:
            while 1:
                menu2 = int(input(opciones2))
                if menu2 == 1:
                    ced = input("- Número de cédula de la persona. Formato X 0XXX 0XXX:")
                    nom = input("- Nombre completo: ")
                    tel = input("- Número telefónico: ")
                    cor = input("- Dirección de correo electrónico: ")
                    sex = input("- Género F (FEMENINO) O M (MASCULINO): ")
                    deu = input("- Monto de deuda: ")
                    mas = input("- Código de mascota: ")
                    cliente = Cliente(ced,nom,tel,cor,sex,deu,mas)
                    print(registrar_cliente(cliente))


                elif menu2 == 2:
                    num = int(input("Ingrese número de cédula de cliente a eliminar: "))
                    print(eliminar_cliente(num))

                elif menu2 == 3:
                    act = int(input("Ingrese el número de cédula del cliente: "))

                elif menu2 == 4:
                    pass
                elif menu2 == 5:
                    break
                else:
                    print("Opción inválida. Intente nuevamente")

        elif op == 3:
            while 1:
                menu3 = int(input(opciones3))
                if menu3 == 1:
                    cod = input("- Código de mascota: ")
                    due = input("- Número de cedula del dueño de la mascota: ")
                    nom = input("- Nombre de la mascota: ")
                    fin = time.strftime("%d/%m/%y")
                    fna = input("- Fecha de nacimiento de la mascota: ")
                    sex = input("- Sexo de la mascota (MACHO: M - HEMBRA: H): ")

                    tip = print(ver_animales())
                    num_animal = int(input("Seleccione el animal que desea ingresar: "))
                    ani = buscar_animal(num_animal)

                    raza = print(ver_raza(num_animal))

                    col = print(ver_colores())
                    num_color = int(input("Seleccione el color de la mascota: "))
                    colo = buscar_color(num_color)

                    peso = input("Peso de mascota: ")
                    dir = input("Dirección del dueño de la mascota: ")
                    tel = input("Teléfono del dueño de la mascota")
                    email = input("Correo electrónico del dueño de la mascota: ")
                    obs = input("Observaciones de la mascota: ")
                    mascota = Mascota(cod, due, nom, fin, fna,sex, tip, raza, col, peso, dir, tel, email, obs)
                    print(registrar_mascota(mascota))

                elif menu3 == 2:
                    cod = input("Ingrese el numero de cédula del cliente: ")
                    print(buscar_cliente(cod))
                    act = input("Indique el dato que desea modificar: "
                                "1.codigo")
                elif menu3 == 3:
                    pass
                elif menu3 == 4:
                    pass
                elif menu3 == 5:
                    break
                else:
                    print("Opción inválida. Intente nuevamente")


        elif op == 4:
            while 1:
                menu4 = int(input(opciones4))
                if menu4 == 1:
                    pass
                elif menu4 == 2:
                    pass
                elif menu4 == 3:
                    pass
                elif menu4 == 4:
                    pass
                elif menu4 == 5:
                    break
                else:
                    print("Opción inválida. Intente nuevamente")

        elif op == 5:
            while 1:
                menu5 = int(input(opciones4))
                if menu5 == 1:
                    cod = input("Ingrese el código de la mascota")
                    print(buscar_mascota(cod))
                    fact = time.strftime("%d/%m/%y")
                    ant = input("- Antecedentes de la mascota: ")
                    tem = input("- Temperatura de la mascota: ")
                    peso = input("- Peso de la mascota: ")
                    trat = input("- Tratamientos aplicado a la mascota: ")
                    obs = input("- Observaciones adicionales")
                    print(nuevo_historial(fact,ant,tem,peso,trat,obs))


                elif menu5 == 2:
                    pass
                elif menu5 == 3:
                    pass
                elif menu5 == 4:
                    pass
                elif menu5 == 5:
                    break
                else:
                    print("Opción inválida. Intente nuevamente")

        elif op == 6:
            while 1:
                menu6 = int(input(opciones6))
                if menu6 == 1:
                    cod = input("- Ingrese el código del tratamiento que desea agregar: ")
                    des = input("- Descripción de tratamiento: ")
                    pre = int(input("- Precio del tratamiento: "))
                    tratamiento = Tratamiento(cod, des, pre)
                    print(registrar_servicio(tratamiento))

                elif menu6 == 2:
                    print(lista_tratamientos())
                    cod = int(input("Seleccione un número para eliminar tratamiento: "))
                    tratamiento = buscar_trat(cod)
                    con = int(input(("Esta seguro que desea "
                                     "eliminar el tratamiento seleccionado: {0}\n"
                                     "1. SI\n"
                                     "2. NO  ").format(info_tratamiento(tratamiento))))

                else:
                    print("Opción inválida. Intente nuevamente")




        elif op == 7:
            while 1:
                menu7 = int(input(opciones7))
                if menu7 == 1:
                    pass
                elif menu7 == 2:
                    cod = input("- Ingrese el código de servicio que desea agregar: ")
                    des = input("- Descripción de servicio: ")
                    pre = int(input("- Precio del servicio: "))
                    servicio = Servicio(cod, des, pre)
                    print(registrar_servicio(servicio))

                elif menu7 == 3:
                    print(lista_servicios())
                    cod = int(input("Seleccione un número para eliminar servicio: "))
                    servicio = buscar_serv(cod)
                    con = int(input(("Esta seguro que desea "
                                     "eliminar el vuelo: {0}\n"
                                     "1. SI\n"
                                     "2. NO  ").format(info_servicio(servicio))))

                elif menu7 == 4:
                    break
                else:
                    print("Opción inválida. Intente nuevamente")
        elif op == 8:
            while 1:
                menu8 = int(input(opciones8))
                if menu8 == 1:
                    id = input("Ingrese el número de cédula del cliente: ")
                    print(buscar_cliente(id))

                elif menu8 == 2:
                    id = input("Ingrese el número de cédula del cliente: ")
                    print(buscar_cliente(id))
                    trat = int(input(" Monto por tratamiento:"))
                    vac = int(input(" Monto por vacunas: "))
                    ser = int(input(" Monto por servicios: "))
                    print(monto_pago(trat, vac, ser))

                elif menu8 == 3:
                    break
                else:
                    print("Opción inválida. Intente nuevamente")

        elif op == 9:
            break
        else:
            print("Opción inválida. Por favor intente nuevamente.")
